#!/usr/bin/env python

import os
import sys
import traceback

from glob import glob
from datetime import datetime

dotfiles_dir = os.path.dirname (os.path.abspath (__file__))
home_dir     = os.environ['HOME']

backup_dir           = '%s/dotfiles' % (home_dir)
backup_folder_prefix = 'dotbackup-'
backup_date          = str (datetime.now()).split('.')[0].replace(':', '').replace(' ', '').replace('-', '')
backup_folder        = '%s%s' % (backup_folder_prefix, backup_date)
backup_info_file     = 'info'
backup_max_to_keep   = 7


class ExitState:
    Succeeded = 0
    Failed    = -1


def runcmd (cmd, silent=True):
    if not silent:
        print '%s' % cmd

    ret = os.system (cmd)

    if ret == 0:
        return ExitState.Succeeded
    else:
        return ExitState.Failed


def cleanup_backup_dir ():
    backup_dirs = []

    for dir in glob('%s/%s*' % (backup_dir, backup_folder_prefix)):
        if os.path.isdir (dir) and os.path.exists ('%s/%s' % (dir, backup_info_file)):
            backup_dirs.append (dir)

    backup_dirs.sort()
    if len (backup_dirs) > backup_max_to_keep:
        for dir in backup_dirs[:len(backup_dirs)-backup_max_to_keep]:
            runcmd ('rm -rf %s' % dir)



def backup (dotfile):
    backupstate = ExitState.Succeeded

    if not os.path.exists (backup_dir):
        os.mkdir (backup_dir)

    abs_backup_dir = os.path.normpath ('%s/%s' % (backup_dir, backup_folder))

    if not os.path.exists (abs_backup_dir):
        os.mkdir (abs_backup_dir)

    backupstate = runcmd ('cp -a %s %s/' % (dotfile, abs_backup_dir))

    if backupstate == ExitState.Succeeded:
        readme = open ('%s/README' % abs_backup_dir, 'w')
        readme.write ('Files in this folder are hidden.\nExecute ls -al in order to expose them\n')
        readme.close()

        info = open ('%s/%s' % (abs_backup_dir, backup_info_file), 'w')
        info.write (str (datetime.now()))
        info.close()


    if backupstate == ExitState.Succeeded:
        if os.path.isfile(dotfile):
            os.system('rm -f %s' % dotfile)
        elif os.path.isdir(dotfile):
            os.system('rm -rf %s' % dotfile)

    return backupstate



def is_blacklisted (dotfile):
    blacklist = [
        '.git',
        '.gitignore',
        '.gitmodules',
        '.swp',
        '.ropeproject'
    ]

    if os.path.islink (dotfile) or os.path.basename(dotfile) in blacklist:
        return True

    return False


def update_gitconfig():
    home = os.environ['HOME']
    username = ''
    email = ''
    gitconfig = os.path.join(home, '.gitconfig')

    if os.path.exists(gitconfig):
        user = os.environ['USER']
        try:
            cmd = 'cat /etc/passwd | grep ^%s' % user
            username = os.popen(cmd).read().split(':')[4].strip()
            if 'account' in username:
                username = username.split('account')[1]
            if 'Account' in username:
                username = username.split('Account')[1]
        except Exception, e:
            print e

        try:
            cmd = 'cat /etc/aliases | grep ^%s' % user
            email = os.popen(cmd).read().split(':')[1].strip()
        except Exception, e:
            print e

        content = ''.join(open(gitconfig, 'r').readlines())
        content = content.replace('__username__', username)
        content = content.replace('__email__', email)

        fh = open(gitconfig, 'w')
        fh.write(content)
        fh.close()


if __name__ == '__main__':
    exitstate = ExitState.Succeeded

    print "Install dependencies for dotfiles"
    runcmd('cd dependencies ; ./install')

    print "Install scripts"
    runcmd('cd bin; ./install')

    for dotfile in glob ('%s/.*' % dotfiles_dir):
        if is_blacklisted (dotfile):
            continue

        print 'Install/Update file %s' % os.path.basename (dotfile)
        try:
            destfile = '%s/%s' % (home_dir, os.path.basename (dotfile))

            if os.path.exists (destfile):
                if backup(destfile) == ExitState.Failed:
                    raise Exception ('Failed to backup file %s' % destfile)

            runcmd ('cp -a %s %s' % (dotfile, home_dir))

        except Exception, e:
            print '--------------------------------------------'
            traceback.print_exc ()
            print '--------------------------------------------\n'
            print e
            exitstate = ExitState.Failed
            break

    update_gitconfig()
    cleanup_backup_dir()

    sys.exit (exitstate)

